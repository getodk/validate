plugins {
    id 'application'
    id 'checkstyle'
    id 'idea'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/groups/public' }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
            exclude 'test'
        }

        resources {
            srcDirs = ['resources']
        }
    }
}

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

dependencies {
    compile group: 'net.sf.kxml', name: 'kxml2', version: '2.3.0'
    compile (group: 'org.getodk', name: 'javarosa', version: '4.4.1') {
        exclude group: "com.fasterxml.jackson.core" // Validate doesn't validate attached geoJSON files
    }
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25'
    testCompile 'junit:junit:4.13.2'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

// Required to use fileExtensions property in checkstyle file
checkstyle {
    toolVersion = '7.6.1'
}

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix' ) {
    os(family: 'unix')
}

// Use the result of git describe --tags --dirty as the version name
// From http://stackoverflow.com/questions/17097263#24121734
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch(ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--dirty', '--always'
                    break
                case 'unix':
                    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
                    break
            }
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

buildConfig {
    appName = 'ODK Validate'
    version = getVersionName()
    clsName = 'BuildConfig'
    packageName = 'org.opendatakit.validate.buildconfig'
}

mainClassName = 'org.opendatakit.validate.FormValidator'

jar {
    baseName = buildConfig.appName
    version = buildConfig.version
    archiveName = (baseName + ' ' + version + '.jar').replaceAll(" ","-")

    from {
        configurations.compile.collect {
            if (it.isDirectory()) {
                return it
            } else {
                if (it.path.contains("bouncycastle")) {
                    return zipTree(it).matching {
                        include '/**/*/ASN1Encodable.class', '/**/*/ASN1Object.class', '/**/*/X9ECParameters.class',
                            '/**/*/X9ObjectIdentifiers.class', '/**/*/CipherParameters.class', '/**/*/DefaultServiceProperties.class',
                            '/**/*/CryptoServiceProperties.class', '/**/*/CryptoServicePurpose.class', '/**/*/CryptoServicesConstraints.class',
                            '/**/*/CryptoServicesPermission.class', '/**/*/CryptoServicesRegistrar.class', '/**/*/CryptoServicesRegistrar$1.class',
                            '/**/*/CryptoServicesRegistrar$Property.class', '/**/*/CryptoServicesRegistrar$ThreadLocalSecureRandomProvider.class',
                            '/**/*/Digest.class', '/**/*/EncodableDigest.class', '/**/*/LongDigest.class', '/**/*/SHA512Digest.class',
                            '/**/*/Utils.class', '/**/*/Utils$DefaultPropertiesWithPRF.class', '/**/*/ExtendedDigest.class',
                            '/**/*/AsymmetricKeyParameter.class', '/**/*/DHParameters.class', '/**/*/DHValidationParameters.class',
                            '/**/*/DSAParameters.class', '/**/*/DSAValidationParameters.class', '/**/*/Ed25519PublicKeyParameters.class',
                            '/**/*/SecureRandomProvider.class', '/**/*/Signer.class', '/**/*/Ed25519Signer.class', '/**/*/Ed25519Signer$Buffer.class',
                            '/**/*/Utils.class', '/**/*/X25519Field.class', '/**/*/Codec.class', '/**/*/Ed25519.class', '/**/*/Ed25519$F.class',
                            '/**/*/Ed25519$PointAccum.class', '/**/*/Ed25519$PointAffine.class', '/**/*/Ed25519$PointExtended.class',
                            '/**/*/Ed25519$PointPrecomp.class', '/**/*/Ed25519$PointPrecompZ.class', '/**/*/Ed25519$PointTemp.class',
                            '/**/*/Ed25519$PublicPoint.class', '/**/*/Scalar25519.class', '/**/*/ScalarUtil.class', '/**/*/Wnaf.class',
                            '/**/*/Mod.class', '/**/*/Nat.class', '/**/*/Nat256.class', '/**/*/Arrays.class', '/**/*/Encodable.class',
                            '/**/*/DecoderException.class', '/**/*/Encoder.class', '/**/*/EncoderException.class',
                            '/**/*/Hex.class', '/**/*/HexEncoder.class', '/**/*/Integers.class',
                            '/**/*/Memoable.class', '/**/*/Pack.class'
                    }
                } else {
                    return zipTree(it)
                }
            }
        }
    }

    manifest {
        attributes 'Main-Class': mainClassName
    }

    // Some of the dependencies are signed jars. When combined into a big jar, the corresponding signature files
    // don't match with big jar, so the runtime refuses to run the jar. The fix is to exclude the signature files.
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

// Useful for testing
task explodedJar(type: Copy) {
    into "$buildDir/libs/$jar.baseName $jar.version"
    with jar
}
