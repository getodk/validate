plugins {
    id 'application'
    id 'checkstyle'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/groups/public' }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

dependencies {
    compile group: 'net.sf.kxml', name: 'kxml2', version: '2.3.0'
    compile group: 'org.opendatakit', name: 'opendatakit-javarosa', version: '2.3.0'
}

// Required to use fileExtensions property in checkstyle file
checkstyle {
    toolVersion = '7.6.1' 
}

ant.condition(property: 'os', value: 'windows') { 
    os(family: 'windows') 
}
ant.condition(property: 'os', value: 'unix' ) { 
    os(family: 'unix') 
}

// Use the result of git describe --tags --dirty as the version name
// From http://stackoverflow.com/questions/17097263#24121734
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch(ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--dirty', '--always'
                    break
                case 'unix':
                    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
                    break
            }
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

buildConfig {
    appName = 'ODK Validate'
    version = getVersionName()
    clsName = 'BuildConfig'
    packageName = 'org.opendatakit.validate.buildconfig'
}

mainClassName = 'org.opendatakit.validate.FormValidator'

jar {
    baseName = buildConfig.appName
    version = buildConfig.version
    archiveName = baseName + ' ' + version + '.jar'

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': mainClassName
    }

    // Some of the dependencies are signed jars. When combined into a big jar, the corresponding signature files
    // don't match with big jar, so the runtime refuses to run the jar. The fix is to exclude the signature files.
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

// Useful for testing
task explodedJar(type: Copy) {
    into "$buildDir/libs/$jar.baseName $jar.version"
    with jar
}
